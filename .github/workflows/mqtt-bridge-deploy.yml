name: Deploy MQTT Bridge

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/mqtt-bridge/**'
      - '.github/workflows/mqtt-bridge-deploy.yml'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd apps/mqtt-bridge
        npm ci
        
    - name: Type check
      run: |
        cd apps/mqtt-bridge
        npm run type-check
        
    - name: Build
      run: |
        cd apps/mqtt-bridge
        npm run build
        
    - name: Create deployment package
      run: |
        cd apps/mqtt-bridge
        tar -czf mqtt-bridge.tar.gz \
          dist/ \
          package.json \
          node_modules/ \
          --exclude=node_modules/.cache
          
    - name: Deploy to server
      if: github.ref == 'refs/heads/main'
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Stopping MQTT Bridge service..."
        sudo systemctl stop mqtt-bridge || true
        
        echo "Backing up current version..."
        if [ -d "/opt/mqtt-bridge" ]; then
          sudo cp -r /opt/mqtt-bridge /opt/mqtt-bridge.backup.$(date +%Y%m%d_%H%M%S)
        fi
        
        echo "Extracting new version..."
        sudo mkdir -p /opt/mqtt-bridge
        sudo tar -xzf mqtt-bridge.tar.gz -C /opt/mqtt-bridge
        
        echo "Setting permissions..."
        sudo chown -R mqtt-bridge:mqtt-bridge /opt/mqtt-bridge
        sudo chmod +x /opt/mqtt-bridge/dist/index.js
        
        echo "Starting MQTT Bridge service..."
        sudo systemctl start mqtt-bridge
        
        echo "Checking service status..."
        sleep 5
        sudo systemctl status mqtt-bridge --no-pager
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
        
        # Copy files to server
        scp -o StrictHostKeyChecking=no \
          -i <(echo "$DEPLOY_KEY") \
          mqtt-bridge.tar.gz \
          deploy.sh \
          $DEPLOY_USER@$DEPLOY_HOST:/tmp/
          
        # Execute deployment
        ssh -o StrictHostKeyChecking=no \
          -i <(echo "$DEPLOY_KEY") \
          $DEPLOY_USER@$DEPLOY_HOST \
          'cd /tmp && sudo ./deploy.sh'
          
    - name: Health check
      if: github.ref == 'refs/heads/main'
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "Performing health check..."
        ssh -o StrictHostKeyChecking=no \
          -i <(echo "$DEPLOY_KEY") \
          $DEPLOY_USER@$DEPLOY_HOST \
          'curl -f http://localhost:3000/health || exit 1'
          
    - name: Notify deployment status
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="✅ 성공"
          COLOR="good"
        else
          STATUS="❌ 실패"
          COLOR="danger"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"MQTT Bridge 배포 $STATUS\",
            \"attachments\": [{
              \"color\": \"$COLOR\",
              \"fields\": [{
                \"title\": \"브랜치\",
                \"value\": \"${{ github.ref_name }}\",
                \"short\": true
              }, {
                \"title\": \"커밋\",
                \"value\": \"${{ github.sha }}\",
                \"short\": true
              }, {
                \"title\": \"배포 시간\",
                \"value\": \"$(date)\",
                \"short\": false
              }]
            }]
          }" \
          $SLACK_WEBHOOK || true
