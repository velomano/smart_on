name: 영양액 레시피 자동 수집

on:
  schedule:
    - cron: '0 0 * * *'   # Asia/Seoul 오전 9시 = UTC 00시 (GitHub Actions는 UTC 기준)
  workflow_dispatch:
    inputs:
      source:
        description: '수집할 소스 (all, cornell, rda, fao, academic)'
        required: false
        default: 'all'
      batch_size:
        description: '배치 크기'
        required: false
        default: '10'

jobs:
  collect-recipes:
    runs-on: ubuntu-latest

    # 🔑 secrets와 inputs를 모두 env로 정리해서, 이후엔 $VAR 형태로만 사용
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_FN_URL: ${{ secrets.SUPABASE_FN_URL }}
      WORKER_URL: ${{ secrets.WORKER_URL }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SOURCE: ${{ github.event.inputs.source || 'all' }}
      BATCH_SIZE: ${{ github.event.inputs.batch_size || '10' }}

    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            apps/web-admin/package-lock.json

      - name: 의존성 설치
        working-directory: apps/web-admin
        run: npm ci

      - name: 환경변수 파일(.env.local) 생성
        run: |
          mkdir -p apps/web-admin
          # 비어있을 수 있으니 안전한 기본값 제공
          echo "SUPABASE_URL=${SUPABASE_URL:-https://kkrcwdybrsppbsufrrdg.supabase.co}" >> apps/web-admin/.env.local
          echo "SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY:-test-key}" >> apps/web-admin/.env.local
          echo "SUPABASE_FN_URL=${SUPABASE_FN_URL:-https://kkrcwdybrsppbsufrrdg.supabase.co/functions/v1}" >> apps/web-admin/.env.local
          echo "WORKER_URL=${WORKER_URL:-http://localhost:3003}" >> apps/web-admin/.env.local

      - name: 영양액 레시피 수집 실행 (배치 처리)
        working-directory: apps/web-admin
        shell: bash
        run: |
          set -euo pipefail

          SUPA_URL="${SUPABASE_URL:-https://kkrcwdybrsppbsufrrdg.supabase.co}"
          SUPA_KEY="${SUPABASE_SERVICE_ROLE_KEY:-test-key}"
          WORKER="${WORKER_URL:-http://localhost:3003}"
          SRC="${SOURCE:-all}"
          BATCH="${BATCH_SIZE:-10}"

          echo "🚀 영양액 레시피 수집 시작 (소스: ${SRC}, 배치: ${BATCH})"

          # Node 20은 fetch 전역 지원
          node - << 'EOF'
          const { env } = process;

          const SUPA_URL = env.SUPABASE_URL || 'https://kkrcwdybrsppbsufrrdg.supabase.co';
          const SUPA_KEY = env.SUPABASE_SERVICE_ROLE_KEY || 'test-key';
          const WORKER   = env.WORKER_URL || 'http://localhost:3003';
          const SRC      = env.SOURCE || 'all';
          const BATCH    = parseInt(env.BATCH_SIZE || '10', 10);

          function parseCountFromContentRange(header) {
            // e.g. "0-0/123"
            if (!header) return 0;
            const m = header.match(/\/(\d+)$/);
            return m ? parseInt(m[1], 10) : 0;
          }

          async function getRecipeCount() {
            // 최소 데이터만 요청 + 정확한 카운트 요청
            const url = `${SUPA_URL}/rest/v1/crop_profiles?select=id`;
            const res = await fetch(url, {
              headers: {
                'apikey': SUPA_KEY,
                'Authorization': `Bearer ${SUPA_KEY}`,
                'Prefer': 'count=exact',
                'Range': '0-0'
              }
            });
            if (!res.ok) throw new Error(`Supabase count query failed: ${res.status}`);
            const contentRange = res.headers.get('Content-Range');
            return parseCountFromContentRange(contentRange);
          }

          async function main() {
            try {
              const before = await getRecipeCount();
              console.log(`📊 기존 레시피 수: ${before}건`);

              const res = await fetch(`${WORKER}/sources/${SRC}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ batch_size: BATCH })
              });
              if (!res.ok) throw new Error(`워커 응답 실패: ${res.status}`);
              const data = await res.json().catch(() => ({}));
              console.log(`✅ 수집 완료(워커 보고): ${data.count ?? 0}건`);

              const after = await getRecipeCount();
              console.log(`📊 최종 레시피 수: ${after}건`);
              console.log(`💾 추가된 레시피: ${Math.max(after - before, 0)}건`);
              console.log('🎉 영양액 레시피 수집 작업 완료');
            } catch (err) {
              console.error('❌ 수집 작업 실패:', err?.message || err);
              process.exit(1);
            }
          }

          main();
          EOF

      - name: 수집 결과 알림 (선택사항)
        # secrets를 if에서 직접 쓰지 말고, env 값을 기준으로 체크
        if: ${{ always() && env.SLACK_WEBHOOK_URL != '' }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            영양액 레시피 수집 작업 완료
            상태: ${{ job.status }}
            소스: ${{ env.SOURCE }}
            트리거: ${{ github.event_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
