name: 영양액 레시피 자동 수집

on:
  schedule:
    # 매일 오전 3시 (KST) 실행 - 소량씩 수집
    - cron: '0 18 * * *'  # UTC 기준 (KST -9시간)
  
  # 수동 실행도 가능
  workflow_dispatch:
    inputs:
      source:
        description: '수집할 소스 선택'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - cornell
          - rda
          - fao
          - academic
      batch_size:
        description: '배치 크기 (기본 10개)'
        required: false
        default: '10'
        type: string

jobs:
  collect-nutrient-recipes:
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 의존성 설치
      run: |
        cd apps/web-admin
        npm ci
        
    - name: 환경변수 설정
      run: |
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> apps/web-admin/.env.local
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> apps/web-admin/.env.local
        echo "SUPABASE_FN_URL=${{ secrets.SUPABASE_FN_URL }}" >> apps/web-admin/.env.local
        echo "WORKER_URL=${{ secrets.WORKER_URL }}" >> apps/web-admin/.env.local
        
    - name: 영양액 레시피 수집 실행 (배치 처리)
      run: |
        cd apps/web-admin
        node -e "
        const fetch = require('node-fetch');
        
        async function collectRecipesBatch() {
          try {
            const batchSize = parseInt('${{ github.event.inputs.batch_size || '10' }}');
            const source = '${{ github.event.inputs.source || 'all' }}';
            
            console.log(\`🚀 영양액 레시피 배치 수집 시작 (소스: \${source}, 배치크기: \${batchSize})\`);
            
            // 1. 기존 레시피 수 확인 (중복 체크용)
            const existingResponse = await fetch('${{ secrets.SUPABASE_URL }}/rest/v1/vw_crop_recipes_latest?select=count', {
              headers: {
                'apikey': '${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}',
                'Authorization': \`Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}\`
              }
            });
            
            const existingCount = await existingResponse.json();
            console.log(\`📊 기존 레시피 수: \${existingCount.length}건\`);
            
            // 2. 워커에서 레시피 수집
            const response = await fetch(\`${{ secrets.WORKER_URL }}/sources/\${source}\`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ batch_size: batchSize })
            });
            
            if (!response.ok) {
              throw new Error(\`워커 응답 실패: \${response.status}\`);
            }
            
            const data = await response.json();
            const collectedRecipes = data.data || [];
            console.log(\`✅ 수집 완료: \${collectedRecipes.length}건\`);
            
            if (collectedRecipes.length === 0) {
              console.log('⚠️ 수집된 레시피가 없습니다.');
              return;
            }
            
            // 3. 중복 체크 및 필터링
            const uniqueRecipes = [];
            const duplicates = [];
            
            for (const recipe of collectedRecipes) {
              // 체크섬으로 중복 확인
              const duplicateCheck = await fetch(\`${{ secrets.SUPABASE_URL }}/rest/v1/nutrient_recipes?checksum=eq.\${recipe.checksum}&select=id\`, {
                headers: {
                  'apikey': '${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}',
                  'Authorization': \`Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}\`
                }
              });
              
              const existing = await duplicateCheck.json();
              
              if (existing.length === 0) {
                uniqueRecipes.push(recipe);
              } else {
                duplicates.push(recipe);
              }
            }
            
            console.log(\`🔄 중복 제거: \${uniqueRecipes.length}건 신규, \${duplicates.length}건 중복\`);
            
            // 4. 신규 레시피만 저장
            if (uniqueRecipes.length > 0) {
              const ingestResponse = await fetch('${{ secrets.SUPABASE_FN_URL }}/ingest-nutrient', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': \`Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}\`
                },
                body: JSON.stringify(uniqueRecipes)
              });
              
              if (!ingestResponse.ok) {
                throw new Error(\`저장 실패: \${ingestResponse.status}\`);
              }
              
              const result = await ingestResponse.json();
              console.log(\`💾 저장 완료: \${result.count || 0}건\`);
            } else {
              console.log('ℹ️ 저장할 신규 레시피가 없습니다.');
            }
            
            console.log('🎉 영양액 레시피 배치 수집 완료!');
            
          } catch (error) {
            console.error('❌ 수집 실패:', error.message);
            process.exit(1);
          }
        }
        
        collectRecipesBatch();
        "
        
    - name: 수집 결과 알림 (선택사항)
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          영양액 레시피 수집 작업 완료
          상태: ${{ job.status }}
          소스: ${{ github.event.inputs.source || 'all' }}
          시간: ${{ github.event.schedule || '수동 실행' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
