# ==================== Universal Bridge Production Docker Compose ====================
# Go-Live 체크리스트 기반 프로덕션 배포 설정

version: '3.8'

services:
  universal-bridge:
    image: your-registry/universal-bridge:latest
    container_name: universal-bridge
    restart: unless-stopped
    ports:
      - "8080:8080"  # HTTP API
      - "1883:1883"  # MQTT Broker (TCP)
      - "8083:8083"  # MQTT over WebSocket
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - BRIDGE_HTTP_PORT=8080
      - BRIDGE_MQTT_PORT=1883
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bridge-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bridge.rule=Host(`bridge.your-domain.com`)"
      - "traefik.http.routers.bridge.tls=true"
      - "traefik.http.routers.bridge.tls.certresolver=letsencrypt"
      - "traefik.http.services.bridge.loadbalancer.server.port=8080"

  # Redis (선택사항 - 캐싱 및 세션 저장)
  redis:
    image: redis:7-alpine
    container_name: universal-bridge-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass your-redis-password
    networks:
      - bridge-network

  # Nginx (선택사항 - 리버스 프록시 및 로드 밸런싱)
  nginx:
    image: nginx:alpine
    container_name: universal-bridge-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - universal-bridge
    networks:
      - bridge-network

networks:
  bridge-network:
    driver: bridge

volumes:
  redis-data:
    driver: local

# ==================== 배포 명령어 ====================
# 
# 1. 환경변수 설정:
#    cp env.production.template .env.production
#    # .env.production 파일을 편집하여 실제 값으로 변경
#
# 2. 이미지 빌드:
#    docker build -t your-registry/universal-bridge:latest .
#
# 3. 서비스 시작:
#    docker-compose -f docker-compose.production.yml up -d
#
# 4. 로그 확인:
#    docker-compose -f docker-compose.production.yml logs -f universal-bridge
#
# 5. 헬스체크:
#    curl http://localhost:8080/healthz
#    curl http://localhost:8080/ready
#
# 6. 서비스 중지:
#    docker-compose -f docker-compose.production.yml down
