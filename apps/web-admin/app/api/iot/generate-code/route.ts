// IoT 코드 생성 API 엔드포인트
import { NextRequest, NextResponse } from 'next/server';

// Edge 런타임 사용 (템플릿 조합만 하므로 빠르고 저렴)
export const runtime = 'edge';

interface GenerateCodeRequest {
  device: string;
  protocol: 'http' | 'mqtt';
  sensors: Array<{ type: string; count: number }>;
  controls: Array<{ type: string; count: number }>;
}

export async function POST(request: NextRequest) {
  try {
    const body: GenerateCodeRequest = await request.json();
    
    // 코드 생성 로직 (간단한 템플릿 기반)
    const code = generateArduinoCode(body);
    
    return new NextResponse(code, {
      headers: {
        'Content-Type': 'text/plain',
        'Content-Disposition': 'attachment; filename="iot_system.ino"'
      }
    });
  } catch (error) {
    console.error('코드 생성 오류:', error);
    return NextResponse.json(
      { error: '코드 생성에 실패했습니다.' },
      { status: 500 }
    );
  }
}

function generateArduinoCode(req: GenerateCodeRequest): string {
  const { device, protocol, sensors: sensorSpecs, controls: controlSpecs } = req;
  
  // 헤더 생성
  const headers = [
    '// Auto-generated by IoT Designer',
    '#include <WiFi.h>',
    '#include <ArduinoJson.h>',
    protocol === 'mqtt' ? '#include <PubSubClient.h>' : '#include <HTTPClient.h>',
    '#include <WebServer.h>',
    ''
  ];
  
  // 센서별 include 및 정의
  const sensorIncludes = new Set<string>();
  const sensorDefines = new Set<string>();
  const sensorInit = new Set<string>();
  const sensorRead = new Set<string>();
  
  sensorSpecs.forEach(({ type, count }) => {
    switch (type) {
      case 'dht22':
        sensorIncludes.add('#include <DHT.h>');
        sensorDefines.add('#define DHT_PIN 4');
        sensorDefines.add('#define DHT_TYPE DHT22');
        sensorInit.add('DHT dht(DHT_PIN, DHT_TYPE);');
        sensorRead.add('float temperature = dht.readTemperature();');
        sensorRead.add('float humidity = dht.readHumidity();');
        break;
      case 'ds18b20':
        sensorIncludes.add('#include <OneWire.h>');
        sensorIncludes.add('#include <DallasTemperature.h>');
        sensorDefines.add('#define ONE_WIRE_BUS 5');
        sensorInit.add('OneWire oneWire(ONE_WIRE_BUS);');
        sensorInit.add('DallasTemperature tempSensor(&oneWire);');
        sensorRead.add('tempSensor.requestTemperatures();');
        sensorRead.add('float temp1 = tempSensor.getTempCByIndex(0);');
        break;
      case 'bh1750':
        sensorIncludes.add('#include <Wire.h>');
        sensorIncludes.add('#include <BH1750.h>');
        sensorInit.add('BH1750 lightMeter;');
        sensorRead.add('float lux = lightMeter.readLightLevel();');
        break;
      case 'soil_moisture':
        sensorDefines.add('#define SOIL_PIN A0');
        sensorRead.add('int soilMoisture = analogRead(SOIL_PIN);');
        break;
      case 'ph_sensor':
        sensorDefines.add('#define PH_PIN A1');
        sensorRead.add('int phValue = analogRead(PH_PIN);');
        break;
    }
  });
  
  // 제어별 정의
  const controlDefines = new Set<string>();
  const controlInit = new Set<string>();
  
  controlSpecs.forEach(({ type, count }) => {
    switch (type) {
      case 'relay':
        controlDefines.add('#define RELAY_PIN 12');
        controlInit.add('pinMode(RELAY_PIN, OUTPUT);');
        break;
      case 'dc_fan_pwm':
        controlDefines.add('#define FAN_PIN 18');
        controlInit.add('pinMode(FAN_PIN, OUTPUT);');
        break;
      case 'servo':
        sensorIncludes.add('#include <Servo.h>');
        controlDefines.add('#define SERVO_PIN 19');
        controlInit.add('Servo servo;');
        controlInit.add('servo.attach(SERVO_PIN);');
        break;
      case 'led_strip':
        controlDefines.add('#define LED_PIN 20');
        controlInit.add('pinMode(LED_PIN, OUTPUT);');
        break;
    }
  });
  
  // WiFi 설정
  const wifiConfig = [
    '// WiFi 설정',
    'const char* ssid = "YOUR_WIFI_SSID";',
    'const char* password = "YOUR_WIFI_PASSWORD";',
    '',
    '// 서버 설정',
    protocol === 'http' 
      ? 'const char* serverUrl = "http://your-server.com/api/bridge/telemetry";'
      : 'const char* mqttServer = "your-mqtt-broker.com";',
    'const int serverPort = ' + (protocol === 'http' ? '80' : '1883') + ';',
    ''
  ];
  
  // 전역 변수
  const globalVars = [
    '// 전역 변수',
    'unsigned long lastSend = 0;',
    'const unsigned long sendInterval = 5000; // 5초마다 전송',
    ''
  ];
  
  // setup 함수
  const setupFunction = [
    'void setup() {',
    '  Serial.begin(115200);',
    '  ',
    '  // WiFi 연결',
    '  WiFi.begin(ssid, password);',
    '  while (WiFi.status() != WL_CONNECTED) {',
    '    delay(1000);',
    '    Serial.println("WiFi 연결 중...");',
    '  }',
    '  Serial.println("WiFi 연결됨");',
    '  Serial.print("IP 주소: ");',
    '  Serial.println(WiFi.localIP());',
    '  ',
    '  // 센서 초기화',
    ...Array.from(sensorInit).map(line => '  ' + line),
    '  ',
    '  // 제어 초기화',
    ...Array.from(controlInit).map(line => '  ' + line),
    '}',
    ''
  ];
  
  // loop 함수
  const loopFunction = [
    'void loop() {',
    '  unsigned long currentTime = millis();',
    '  ',
    '  if (currentTime - lastSend >= sendInterval) {',
    '    // 센서 읽기',
    ...Array.from(sensorRead).map(line => '    ' + line),
    '    ',
    '    // 데이터 전송',
    '    sendSensorData();',
    '    ',
    '    lastSend = currentTime;',
    '  }',
    '  ',
    '  // 명령 수신 처리',
    '  handleCommands();',
    '  ',
    '  delay(100);',
    '}',
    ''
  ];
  
  // 데이터 전송 함수
  const sendDataFunction = [
    'void sendSensorData() {',
    '  DynamicJsonDocument doc(1024);',
    '  ',
    '  // 센서 데이터 추가',
    ...sensorSpecs.map(({ type }) => {
      switch (type) {
        case 'dht22':
          return '  doc["temperature"] = temperature;\n  doc["humidity"] = humidity;';
        case 'ds18b20':
          return '  doc["temperature"] = temp1;';
        case 'bh1750':
          return '  doc["light"] = lux;';
        case 'soil_moisture':
          return '  doc["soil_moisture"] = soilMoisture;';
        case 'ph_sensor':
          return '  doc["ph"] = phValue;';
        default:
          return '';
      }
    }).filter(Boolean),
    '  ',
    '  // 타임스탬프 추가',
    '  doc["timestamp"] = millis();',
    '  ',
    protocol === 'http' 
      ? [
          '  // HTTP 전송',
          '  HTTPClient http;',
          '  http.begin(serverUrl);',
          '  http.addHeader("Content-Type", "application/json");',
          '  ',
          '  String jsonString;',
          '  serializeJson(doc, jsonString);',
          '  ',
          '  int httpResponseCode = http.POST(jsonString);',
          '  if (httpResponseCode > 0) {',
          '    Serial.println("데이터 전송 성공");',
          '  } else {',
          '    Serial.println("데이터 전송 실패");',
          '  }',
          '  http.end();'
        ]
      : [
          '  // MQTT 전송',
          '  if (mqttClient.connected()) {',
          '    String jsonString;',
          '    serializeJson(doc, jsonString);',
          '    mqttClient.publish("sensors/data", jsonString.c_str());',
          '  }'
        ],
    '}',
    ''
  ];
  
  // 명령 처리 함수
  const handleCommandsFunction = [
    'void handleCommands() {',
    '  // 명령 수신 처리 (HTTP 또는 MQTT)',
    '  // TODO: 명령 파싱 및 제어 실행',
    '}',
    ''
  ];
  
  // 전체 코드 조합
  const fullCode = [
    ...headers,
    ...Array.from(sensorIncludes),
    ...Array.from(sensorDefines),
    ...Array.from(controlDefines),
    ...wifiConfig,
    ...globalVars,
    ...setupFunction,
    ...loopFunction,
    ...sendDataFunction,
    ...handleCommandsFunction
  ].join('\n');
  
  return fullCode;
}
