'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { getCurrentUser, AuthUser, getUserSettings, updateUserSettings } from '../../lib/auth';
import { getFarms, getDevices, getSensors, getSensorReadings, Farm, Device, Sensor, SensorReading } from '../../lib/supabase';
import AppHeader from '../../components/AppHeader';

export default function BedsManagementPage() {
  const [farms, setFarms] = useState<Farm[]>([]);
  const [devices, setDevices] = useState<Device[]>([]);
  const [sensors, setSensors] = useState<Sensor[]>([]);
  const [sensorReadings, setSensorReadings] = useState<SensorReading[]>([]);
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState<AuthUser | null>(null);
  const [authLoading, setAuthLoading] = useState(true);
  const [selectedBed, setSelectedBed] = useState<string>('');
  const [bedFilter, setBedFilter] = useState<'all' | 'active' | 'inactive' | 'dashboard' | 'no-dashboard'>('all');
  const [editingDevice, setEditingDevice] = useState<string | null>(null);
  const [editFormData, setEditFormData] = useState({
    name: '',
    location: '',
    status: true
  });
  const [userSettings, setUserSettings] = useState({
    showTeamBedsOnDashboard: true,
    showAllBedsInBedManagement: false
  });
  const [bedDashboardSettings, setBedDashboardSettings] = useState<Record<string, boolean>>({});
  const [bedControls, setBedControls] = useState<Record<string, {
    lamp1: boolean;
    lamp2: boolean;
    pump: boolean;
    fan: boolean;
    schedule: {
      enabled: boolean;
      onTime: string;
      offTime: string;
    };
    dualTime: {
      enabled: boolean;
      onMinutes: number;
      offMinutes: number;
    };
  }>>({});
  const [showAddBedModal, setShowAddBedModal] = useState(false);
  const [newBedData, setNewBedData] = useState({
    name: '',
    cropName: '',
    growingMethod: '담액식' as '담액식' | 'NFT식' | '분무식' | '점적식' | '기타'
  });
  const [selectedFarmTab, setSelectedFarmTab] = useState<string>('all');
  const [showAddFarmModal, setShowAddFarmModal] = useState(false);
  const [newFarmData, setNewFarmData] = useState({
    name: '',
    description: '',
    location: ''
  });
  const router = useRouter();

  useEffect(() => {
    const checkAuth = async () => {
      const currentUser = await getCurrentUser();
      if (!currentUser || !currentUser.is_approved || !currentUser.is_active) {
        router.push('/login');
        return;
      }
      setUser(currentUser);
      
      // 사용자 설정 로드
      const settings = getUserSettings(currentUser.id);
      setUserSettings(settings);
      
      // 베드 대시보드 설정 로드
      if (typeof window !== 'undefined') {
        const savedBedSettings = localStorage.getItem('bed_dashboard_settings');
        if (savedBedSettings) {
          const parsedSettings = JSON.parse(savedBedSettings);
          setBedDashboardSettings(parsedSettings);
          console.log('베드 관리에서 설정 로드됨:', parsedSettings);
        }
        
        // 베드 컨트롤 설정 로드
        const savedBedControls = localStorage.getItem('bed_controls');
        if (savedBedControls) {
          const parsedControls = JSON.parse(savedBedControls);
          setBedControls(parsedControls);
          console.log('베드 컨트롤 설정 로드됨:', parsedControls);
        }
      }
      
      setAuthLoading(false);
    };
    checkAuth();
  }, [router]);

  useEffect(() => {
    if (!user) return;

    const loadData = async () => {
      try {
      const [farmsData, devicesData, sensorsData, sensorReadingsData] = await Promise.all([
        getFarms(),
        getDevices(),
        getSensors(),
        getSensorReadings()
      ]);
      
      setFarms(farmsData);
      setDevices(devicesData);
      setSensors(sensorsData);
      setSensorReadings(sensorReadingsData);
      } catch (error) {
        console.error('Error loading data:', error);
      } finally {
        setLoading(false);
      }
    };
    loadData();
  }, [user]);

  const handleEditDevice = (device: Device) => {
    setEditingDevice(device.id);
    setEditFormData({
      name: device.meta?.location || '',
      location: device.meta?.location || '',
      status: device.status?.online || false
    });
  };

  const handleSaveEdit = (deviceId: string) => {
    // 실제로는 API 호출로 디바이스 정보 업데이트
    setDevices(prev => prev.map(device => 
      device.id === deviceId 
        ? {
            ...device,
            meta: { ...device.meta, location: editFormData.location },
            status: { ...device.status, online: editFormData.status }
          }
        : device
    ));
    setEditingDevice(null);
  };

  const handleCancelEdit = () => {
    setEditingDevice(null);
    setEditFormData({ name: '', location: '', status: true });
  };

  const handleSettingChange = (key: string, value: boolean) => {
    if (!user) return;
    
    const newSettings = { ...userSettings, [key]: value };
    setUserSettings(newSettings);
    updateUserSettings(user.id, newSettings);
  };

  const handleBedDashboardToggle = (deviceId: string, showOnDashboard: boolean) => {
    const newSettings = {
      ...bedDashboardSettings,
      [deviceId]: showOnDashboard
    };
    setBedDashboardSettings(newSettings);
    
    // 로컬 스토리지에 저장
    if (typeof window !== 'undefined') {
      localStorage.setItem('bed_dashboard_settings', JSON.stringify(newSettings));
      console.log('베드 대시보드 설정 저장됨:', newSettings);
    }
  };

  // 베드 컨트롤 핸들러들
  const handleDeviceToggle = (deviceId: string, deviceType: 'lamp1' | 'lamp2' | 'pump' | 'fan', value: boolean) => {
    const currentControls = bedControls[deviceId] || {
      lamp1: false,
      lamp2: false,
      pump: false,
      fan: false,
      schedule: { enabled: false, onTime: '08:00', offTime: '18:00' },
      dualTime: { enabled: false, onMinutes: 30, offMinutes: 30 }
    };
    
    const newControls = {
      ...bedControls,
      [deviceId]: {
        ...currentControls,
        [deviceType]: value
      }
    };
    
    setBedControls(newControls);
    
    if (typeof window !== 'undefined') {
      localStorage.setItem('bed_controls', JSON.stringify(newControls));
      console.log(`${deviceType} ${value ? '켜짐' : '꺼짐'}:`, deviceId);
    }
  };

  const handleScheduleChange = (deviceId: string, field: 'enabled' | 'onTime' | 'offTime', value: boolean | string) => {
    const currentControls = bedControls[deviceId] || {
      lamp1: false,
      lamp2: false,
      pump: false,
      fan: false,
      schedule: { enabled: false, onTime: '08:00', offTime: '18:00' },
      dualTime: { enabled: false, onMinutes: 30, offMinutes: 30 }
    };
    
    const newControls = {
      ...bedControls,
      [deviceId]: {
        ...currentControls,
        schedule: {
          ...currentControls.schedule,
          [field]: value
        }
      }
    };
    
    setBedControls(newControls);
    
    if (typeof window !== 'undefined') {
      localStorage.setItem('bed_controls', JSON.stringify(newControls));
      console.log('스케줄 설정 변경:', deviceId, field, value);
    }
  };

  const handleDualTimeChange = (deviceId: string, field: 'enabled' | 'onMinutes' | 'offMinutes', value: boolean | number) => {
    const currentControls = bedControls[deviceId] || {
      lamp1: false,
      lamp2: false,
      pump: false,
      fan: false,
      schedule: { enabled: false, onTime: '08:00', offTime: '18:00' },
      dualTime: { enabled: false, onMinutes: 30, offMinutes: 30 }
    };
    
    const newControls = {
      ...bedControls,
      [deviceId]: {
        ...currentControls,
        dualTime: {
          ...currentControls.dualTime,
          [field]: value
        }
      }
    };
    
    setBedControls(newControls);
    
    if (typeof window !== 'undefined') {
      localStorage.setItem('bed_controls', JSON.stringify(newControls));
      console.log('듀얼 타임 설정 변경:', deviceId, field, value);
    }
  };

  // 베드 필터링 로직
  const handleAddBed = () => {
    if (!newBedData.name.trim() || !newBedData.cropName.trim()) {
      alert('배드 이름과 작물 이름을 입력해주세요.');
      return;
    }

    // 선택된 농장 ID 결정 (농장별 탭에서 선택된 농장 우선, 없으면 첫 번째 농장)
    const targetFarmId = selectedFarmTab !== 'all' ? selectedFarmTab : (farms[0]?.id || '1');
    const targetFarm = farms.find(f => f.id === targetFarmId);

    // 새 배드 생성 (실제로는 API 호출)
    const newBed: Device = {
      id: `bed-${Date.now()}`,
      farm_id: targetFarmId,
      type: 'sensor_gateway',
      name: newBedData.name,
      status: { online: true },
      meta: {
        location: `${targetFarm?.name || '농장'}-${newBedData.name}`,
        crop_name: newBedData.cropName,
        growing_method: newBedData.growingMethod
      },
      created_at: new Date().toISOString()
    };

    setDevices(prev => [...prev, newBed]);
    
    // 새 배드를 대시보드에 표시하도록 설정
    setBedDashboardSettings(prev => ({
      ...prev,
      [newBed.id]: true
    }));
    
    // 로컬 스토리지에도 저장
    if (typeof window !== 'undefined') {
      const updatedSettings = { ...bedDashboardSettings, [newBed.id]: true };
      localStorage.setItem('bed_dashboard_settings', JSON.stringify(updatedSettings));
    }
    
    // 폼 초기화
    setNewBedData({
      name: '',
      cropName: '',
      growingMethod: '담액식'
    });
    
    // 모달 닫기
    setShowAddBedModal(false);
    
    alert(`새 배드가 ${targetFarm?.name || '농장'}에 추가되었습니다!`);
  };

  // 새 농장 추가 함수
  const handleAddFarm = () => {
    if (!newFarmData.name.trim()) {
      alert('농장 이름을 입력해주세요.');
      return;
    }

    // 새 농장 생성 (실제로는 API 호출)
    const newFarm: Farm = {
      id: `farm-${Date.now()}`,
      name: newFarmData.name,
      description: newFarmData.description,
      location: newFarmData.location,
      team_id: user?.team_id || '1', // 현재 사용자의 팀에 속하도록 설정
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    setFarms(prev => [...prev, newFarm]);
    
    // 새 농장 탭으로 자동 전환
    setSelectedFarmTab(newFarm.id);
    
    // 폼 초기화
    setNewFarmData({
      name: '',
      description: '',
      location: ''
    });
    
    // 모달 닫기
    setShowAddFarmModal(false);
    
    alert(`새 농장 "${newFarm.name}"이 추가되었습니다!`);
  };

  const getFilteredDevices = () => {
    let filtered = devices.filter(d => d.type === 'sensor_gateway');
    
    // 사용자가 팀원인 경우, 자신의 농장에 속한 베드만 표시
    if (user && (user.role === 'team_leader' || user.role === 'team_member') && !userSettings.showAllBedsInBedManagement) {
      // 농장에 속한 농장의 베드만 필터링 (현재는 모든 베드를 표시하지만, 실제로는 농장별 농장 매핑이 필요)
      // 임시로 모든 베드를 표시 (실제 구현에서는 농장별 농장 매핑 테이블이 필요)
      filtered = devices.filter(d => d.type === 'sensor_gateway');
    }
    
    // 농장별 필터 적용
    if (selectedFarmTab !== 'all') {
      filtered = filtered.filter(d => d.farm_id === selectedFarmTab);
    }
    
    // 베드 필터 적용
    switch (bedFilter) {
      case 'active':
        filtered = filtered.filter(d => d.status === true);
        break;
      case 'inactive':
        filtered = filtered.filter(d => d.status === false);
        break;
      case 'dashboard':
        filtered = filtered.filter(d => bedDashboardSettings[d.id] !== false);
        break;
      case 'no-dashboard':
        filtered = filtered.filter(d => bedDashboardSettings[d.id] === false);
        break;
      case 'all':
      default:
        // 모든 베드 표시
        break;
    }
    
    // 특정 베드 선택 필터
    if (selectedBed) {
      filtered = filtered.filter(d => d.id === selectedBed);
    }
    
    return filtered;
  };

  const filteredDevices = getFilteredDevices();

  if (authLoading || loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">로딩 중...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      {/* Header */}
      {user && (
        <AppHeader
          user={user}
          title="농장 관리"
          subtitle="농장별 베드와 센서 게이트웨이를 관리합니다"
        />
      )}

      {/* User Info Card */}
      {user && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <span className="text-2xl">
                    {user.role === 'system_admin' ? '👑' : 
                     user.role === 'team_leader' ? '👨‍💼' : '👤'}
                  </span>
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-gray-900">{user.name}</h2>
                  <p className="text-gray-600 font-medium">{user.email}</p>
                  <div className="flex items-center space-x-4 mt-2">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                      {user.role === 'system_admin' ? '시스템 관리자' :
                       user.role === 'team_leader' ? '농장장' : '팀원'}
                    </span>
                    {user.team_name && (
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                        {user.team_name}
                      </span>
                    )}
                  </div>
                </div>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">마지막 로그인</p>
                <p className="text-lg font-semibold text-gray-900">
                  {new Date().toLocaleDateString('ko-KR', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white/70 backdrop-blur-sm overflow-hidden shadow-2xl rounded-2xl border border-white/20">
            <div className="p-6">
              <div className="flex items-center">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <span className="text-3xl">🏠</span>
                </div>
                <div className="ml-4">
                  <dt className="text-sm font-semibold text-gray-600 uppercase tracking-wide">
                    총 농장 수
                  </dt>
                  <dd className="text-3xl font-black text-gray-900">{farms.length}</dd>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white/70 backdrop-blur-sm overflow-hidden shadow-2xl rounded-2xl border border-white/20">
            <div className="p-6">
              <div className="flex items-center">
                <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <span className="text-3xl">🌱</span>
                </div>
                <div className="ml-4">
                  <dt className="text-sm font-semibold text-gray-600 uppercase tracking-wide">
                    총 베드 수
                  </dt>
                  <dd className="text-3xl font-black text-gray-900">{devices.filter(d => d.type === 'sensor_gateway').length}</dd>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white/70 backdrop-blur-sm overflow-hidden shadow-2xl rounded-2xl border border-white/20">
            <div className="p-6">
              <div className="flex items-center">
                <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <span className="text-3xl">📊</span>
                </div>
                <div className="ml-4">
                  <dt className="text-sm font-semibold text-gray-600 uppercase tracking-wide">
                    총 센서 수
                  </dt>
                  <dd className="text-3xl font-black text-gray-900">{sensors.length}</dd>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Bed Filter & Settings */}
        <div className="bg-white/70 backdrop-blur-sm shadow-2xl rounded-2xl border border-white/20 p-6 mb-8">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-xl font-bold text-gray-900">베드 필터</h3>
            <div className="flex items-center space-x-4">
              {/* 설정 토글 */}
              {user && (user.role === 'team_leader' || user.role === 'team_member') && (
                <div className="flex items-center space-x-2">
                  <label className="text-sm font-medium text-gray-700">
                    모든 베드 보기
                  </label>
                  <button
                    onClick={() => handleSettingChange('showAllBedsInBedManagement', !userSettings.showAllBedsInBedManagement)}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 ${
                      userSettings.showAllBedsInBedManagement ? 'bg-blue-600' : 'bg-gray-200'
                    }`}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                        userSettings.showAllBedsInBedManagement ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>
              )}
              {/* 관리자용 설정 */}
              {user && (user.role === 'system_admin' || user.email === 'sky3rain7@gmail.com') && (
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-2">
                    <label className="text-sm font-medium text-gray-700">
                      대시보드 노출 관리
                    </label>
                    <span className="text-xs text-gray-500">(각 베드별 설정)</span>
                  </div>
                </div>
              )}
              <button
                onClick={() => setSelectedBed('')}
                className={`px-4 py-2 rounded-xl font-semibold transition-all duration-200 ${
                  selectedBed === ''
                    ? 'bg-blue-500 text-white shadow-lg'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                전체 보기
              </button>
            </div>
          </div>
          
          {/* Farm Tabs */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-4">
              <h4 className="text-lg font-semibold text-gray-700">농장별 보기</h4>
              {user && (user.role === 'system_admin' || user.email === 'sky3rain7@gmail.com') && (
                <button
                  onClick={() => setShowAddFarmModal(true)}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 rounded-lg font-semibold hover:from-purple-600 hover:to-pink-600 transition-all duration-200 flex items-center space-x-2"
                >
                  <span>+</span>
                  <span>새 농장 추가</span>
                </button>
              )}
            </div>
            <div className="flex flex-wrap gap-2">
              <button
                onClick={() => setSelectedFarmTab('all')}
                className={`px-4 py-2 rounded-lg font-semibold transition-all duration-200 ${
                  selectedFarmTab === 'all'
                    ? 'bg-blue-500 text-white shadow-lg'
                    : 'bg-white/80 text-gray-700 hover:bg-blue-50'
                }`}
              >
                전체 농장 ({farms.length}개)
              </button>
              {farms.map(farm => (
                <button
                  key={farm.id}
                  onClick={() => setSelectedFarmTab(farm.id)}
                  className={`px-4 py-2 rounded-lg font-semibold transition-all duration-200 ${
                    selectedFarmTab === farm.id
                      ? 'bg-green-500 text-white shadow-lg'
                      : 'bg-white/80 text-gray-700 hover:bg-green-50'
                  }`}
                >
                  {farm.name} ({devices.filter(d => d.farm_id === farm.id && d.type === 'sensor_gateway').length}개)
                </button>
              ))}
            </div>
          </div>

          {/* Bed Filter Options */}
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
            <button
              onClick={() => setBedFilter('all')}
              className={`p-4 rounded-xl text-center transition-all duration-200 ${
                bedFilter === 'all'
                  ? 'bg-blue-500 text-white shadow-lg transform scale-105'
                  : 'bg-white/80 hover:bg-blue-50 hover:shadow-lg'
              }`}
            >
              <div className="flex flex-col items-center space-y-2">
                <span className="text-2xl">🌱</span>
                <span className="font-bold">전체</span>
                <span className="text-xs opacity-80">
                  {devices.filter(d => d.type === 'sensor_gateway').length}개
                </span>
              </div>
            </button>
            
            <button
              onClick={() => setBedFilter('active')}
              className={`p-4 rounded-xl text-center transition-all duration-200 ${
                bedFilter === 'active'
                  ? 'bg-green-500 text-white shadow-lg transform scale-105'
                  : 'bg-white/80 hover:bg-green-50 hover:shadow-lg'
              }`}
            >
              <div className="flex flex-col items-center space-y-2">
                <span className="text-2xl">✅</span>
                <span className="font-bold">활성</span>
                <span className="text-xs opacity-80">
                  {devices.filter(d => d.type === 'sensor_gateway' && d.status === true).length}개
                </span>
              </div>
            </button>
            
            <button
              onClick={() => setBedFilter('inactive')}
              className={`p-4 rounded-xl text-center transition-all duration-200 ${
                bedFilter === 'inactive'
                  ? 'bg-red-500 text-white shadow-lg transform scale-105'
                  : 'bg-white/80 hover:bg-red-50 hover:shadow-lg'
              }`}
            >
              <div className="flex flex-col items-center space-y-2">
                <span className="text-2xl">❌</span>
                <span className="font-bold">비활성</span>
                <span className="text-xs opacity-80">
                  {devices.filter(d => d.type === 'sensor_gateway' && d.status === false).length}개
                </span>
              </div>
            </button>
            
            <button
              onClick={() => setBedFilter('dashboard')}
              className={`p-4 rounded-xl text-center transition-all duration-200 ${
                bedFilter === 'dashboard'
                  ? 'bg-purple-500 text-white shadow-lg transform scale-105'
                  : 'bg-white/80 hover:bg-purple-50 hover:shadow-lg'
              }`}
            >
              <div className="flex flex-col items-center space-y-2">
                <span className="text-2xl">📊</span>
                <span className="font-bold">대시보드</span>
                <span className="text-xs opacity-80">
                  {devices.filter(d => d.type === 'sensor_gateway' && bedDashboardSettings[d.id] !== false).length}개
                </span>
              </div>
            </button>
            
            <button
              onClick={() => setBedFilter('no-dashboard')}
              className={`p-4 rounded-xl text-center transition-all duration-200 ${
                bedFilter === 'no-dashboard'
                  ? 'bg-orange-500 text-white shadow-lg transform scale-105'
                  : 'bg-white/80 hover:bg-orange-50 hover:shadow-lg'
              }`}
            >
              <div className="flex flex-col items-center space-y-2">
                <span className="text-2xl">🚫</span>
                <span className="font-bold">숨김</span>
                <span className="text-xs opacity-80">
                  {devices.filter(d => d.type === 'sensor_gateway' && bedDashboardSettings[d.id] === false).length}개
                </span>
              </div>
            </button>
          </div>
          
          {/* Specific Bed Selection */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              특정 베드 선택
            </label>
            <select
              value={selectedBed}
              onChange={(e) => setSelectedBed(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">전체 베드</option>
              {devices
                .filter(d => d.type === 'sensor_gateway')
                .map((device) => (
                  <option key={device.id} value={device.id}>
                    {device.name} ({farms.find(f => f.id === device.farm_id)?.name || '알 수 없는 농장'})
                  </option>
                ))}
            </select>
          </div>
        </div>

        {/* Farms List */}
        <div className="bg-white/70 backdrop-blur-sm shadow-2xl rounded-2xl border border-white/20 overflow-hidden">
          <div className="px-8 py-8">
            <div className="flex items-center justify-between mb-8">
              <div>
                <h3 className="text-2xl font-black text-gray-900 mb-2">
                  🌱 농장별 베드 관리
                </h3>
                <p className="text-gray-600">
                  {selectedFarmTab === 'all' ? '전체 농장의 베드 현황' : `${farms.find(f => f.id === selectedFarmTab)?.name}의 베드 현황`}
                </p>
              </div>
              <div className="flex items-center space-x-4">
                <div className="text-sm text-gray-600">
                  총 {farms.length}개 농장, {filteredDevices.length}개 베드
                </div>
                {selectedFarmTab !== 'all' && (
                  <button 
                    onClick={() => {
                      console.log('상단 새 배드 추가 버튼 클릭됨');
                      setShowAddBedModal(true);
                    }}
                    className="bg-gradient-to-r from-green-500 to-blue-500 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-0.5"
                  >
                    + 새 베드 추가
                  </button>
                )}
              </div>
            </div>

            <div className="space-y-6">
              {(() => {
                // 농장별로 그룹화
                const farmGroups = farms.map(farm => {
                  const farmDevices = filteredDevices.filter(device => device.farm_id === farm.id);
                  return { farm, devices: farmDevices };
                }).filter(group => group.devices.length > 0);

                return farmGroups.map(({ farm, devices }) => (
                  <div key={farm.id} className="bg-gradient-to-r from-white/80 to-white/60 backdrop-blur-sm border border-white/30 rounded-2xl p-6 shadow-xl hover:shadow-2xl transition-all duration-300">
                    {/* 농장 헤더 */}
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center space-x-4">
                        <div className="w-16 h-16 bg-gradient-to-br from-green-400 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg">
                          <span className="text-3xl">🏠</span>
                        </div>
                        <div>
                          <h4 className="text-2xl font-bold text-gray-900">{farm.name}</h4>
                          <p className="text-gray-600 font-medium text-lg">📍 {farm.location || '위치 정보 없음'}</p>
                          <div className="mt-2 flex items-center space-x-4">
                            <span className="text-sm text-blue-600 font-semibold">
                              📊 총 {devices.length}개 베드
                            </span>
                            <div className="flex items-center space-x-1">
                              <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                              <span className="text-xs text-gray-500">활성</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      <span className="text-sm px-4 py-2 bg-green-100 text-green-700 rounded-full font-bold border border-green-200">
                        🟢 온라인
                      </span>
                    </div>

                    {/* 농장에 속한 베드들 */}
                    <div className="space-y-4">
                      <h5 className="text-lg font-semibold text-gray-700 mb-4 flex items-center">
                        <span className="text-xl mr-2">🌱</span>
                        {farm.name}의 베드 목록
                      </h5>

                      <div className="space-y-4">
                        {devices.map((device) => {
                          const deviceSensors = sensors.filter(s => s.device_id === device.id);
                
                          return (
                            <div key={device.id} className="bg-gray-50 rounded-lg p-4 border-l-4 border-l-green-400 hover:shadow-md transition-all duration-200">
                              <div className="flex items-center justify-between mb-3">
                                <div className="flex items-center space-x-3">
                                  <div className="w-8 h-8 bg-gradient-to-br from-blue-400 to-purple-500 rounded-lg flex items-center justify-center">
                                    <span className="text-sm">📡</span>
                                  </div>
                                  <div>
                                    <span className="font-bold text-gray-900 text-sm">
                                      {(device.meta?.location || '센서 게이트웨이').replace(/^농장\d+-/, '')}
                                    </span>
                                    <div className="text-xs text-gray-500">📊 센서 {deviceSensors.length}개</div>
                                  </div>
                                </div>
                                <span
                                  className={`text-xs px-2 py-1 rounded-full font-bold ${
                                    device.status?.online
                                      ? 'bg-green-100 text-green-700'
                                      : 'bg-red-100 text-red-700'
                                  }`}
                                >
                                  {device.status?.online ? '🟢' : '🔴'}
                                </span>
                              </div>
                              
                              <div className="flex items-center space-x-3">
                                {/* 관리자용 대시보드 노출 토글 */}
                                {user && (user.role === 'system_admin' || user.email === 'sky3rain7@gmail.com') && (
                                  <div className="flex items-center space-x-2">
                                    <label className="text-sm font-medium text-gray-700">
                                      대시보드 노출
                                    </label>
                                    <button
                                      onClick={() => handleBedDashboardToggle(device.id, !bedDashboardSettings[device.id])}
                                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 ${
                                        bedDashboardSettings[device.id] !== false ? 'bg-green-600' : 'bg-gray-200'
                                      }`}
                                    >
                                      <span
                                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                                          bedDashboardSettings[device.id] !== false ? 'translate-x-6' : 'translate-x-1'
                                        }`}
                                      />
                                    </button>
                                  </div>
                                )}
                                <button
                                  onClick={() => handleEditDevice(device)}
                                  className="bg-gradient-to-r from-blue-500 to-blue-600 text-white px-4 py-2 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-0.5"
                                >
                                  {editingDevice === device.id ? '저장' : '편집'}
                                </button>
                                {editingDevice === device.id && (
                                  <button
                                    onClick={handleCancelEdit}
                                    className="bg-gradient-to-r from-gray-500 to-gray-600 text-white px-4 py-2 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-0.5"
                                  >
                                    취소
                                  </button>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                ));
              })()}

              {/* 빈 상태 처리 */}
              {(() => {
                const farmGroups = farms.map(farm => {
                  const farmDevices = filteredDevices.filter(device => device.farm_id === farm.id);
                  return { farm, devices: farmDevices };
                }).filter(group => group.devices.length > 0);

                if (farmGroups.length === 0) {
                  return (
                    <div className="text-center py-16">
                      <div className="w-24 h-24 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl flex items-center justify-center mx-auto mb-6">
                        <span className="text-4xl">🌱</span>
                      </div>
                      <h3 className="text-xl font-bold text-gray-900 mb-2">
                        {selectedFarmTab !== 'all' ? 
                          `${farms.find(f => f.id === selectedFarmTab)?.name}에 등록된 베드가 없습니다` :
                          '등록된 농장이 없습니다'
                        }
                      </h3>
                      <p className="text-gray-600 mb-6">
                        {selectedFarmTab !== 'all' ? 
                          '이 농장에 새로운 베드를 추가해보세요.' :
                          '새로운 농장을 추가해보세요.'
                        }
                      </p>
                      {selectedFarmTab !== 'all' && (
                        <button 
                          onClick={() => setShowAddBedModal(true)}
                          className="bg-gradient-to-r from-green-500 to-blue-500 text-white px-8 py-3 rounded-xl font-bold shadow-lg hover:shadow-xl transition-all duration-200"
                        >
                          + 새 베드 추가
                        </button>
                      )}
                    </div>
                  );
                }
                return null;
              })()}
            </div>
          </div>
        </div>

        {/* 새 배드 추가 버튼 - 항상 표시 */}
        {selectedFarmTab !== 'all' && (
          <div className="flex justify-center mt-8">
            <button 
              onClick={() => {
                console.log('새 배드 추가 버튼 클릭됨');
                setShowAddBedModal(true);
              }}
              className="bg-gradient-to-r from-green-500 to-blue-500 text-white px-8 py-3 rounded-xl font-bold shadow-lg hover:shadow-xl transition-all duration-200"
            >
              + 새 베드 추가
            </button>
          </div>
        )}

        {/* 새 배드 추가 모달 */}
        {showAddBedModal && (
                      <div className="mt-6 border-t border-gray-200 pt-6">
                        <h5 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                          <span className="text-2xl mr-2">🎛️</span>
                          스마트 스위치 제어
                        </h5>
                        
                        {/* Device Controls */}
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                          {/* 램프1 */}
                          <div className="bg-white/80 backdrop-blur-sm border border-white/40 rounded-xl p-4">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center space-x-2">
                                <span className="text-2xl">💡</span>
                                <span className="font-semibold text-gray-900">램프1</span>
                              </div>
                              <button
                                onClick={() => handleDeviceToggle(device.id, 'lamp1', !bedControls[device.id]?.lamp1)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 ${
                                  bedControls[device.id]?.lamp1 ? 'bg-green-600' : 'bg-gray-200'
                                }`}
                              >
                                <span
                                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                                    bedControls[device.id]?.lamp1 ? 'translate-x-6' : 'translate-x-1'
                                  }`}
                                />
                              </button>
                            </div>
                            <div className="text-xs text-gray-600">
                              {bedControls[device.id]?.lamp1 ? '켜짐' : '꺼짐'}
                            </div>
                          </div>

                          {/* 램프2 */}
                          <div className="bg-white/80 backdrop-blur-sm border border-white/40 rounded-xl p-4">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center space-x-2">
                                <span className="text-2xl">💡</span>
                                <span className="font-semibold text-gray-900">램프2</span>
                              </div>
                              <button
                                onClick={() => handleDeviceToggle(device.id, 'lamp2', !bedControls[device.id]?.lamp2)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 ${
                                  bedControls[device.id]?.lamp2 ? 'bg-green-600' : 'bg-gray-200'
                                }`}
                              >
                                <span
                                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                                    bedControls[device.id]?.lamp2 ? 'translate-x-6' : 'translate-x-1'
                                  }`}
                                />
                              </button>
                            </div>
                            <div className="text-xs text-gray-600">
                              {bedControls[device.id]?.lamp2 ? '켜짐' : '꺼짐'}
                            </div>
                          </div>

                          {/* 펌프 */}
                          <div className="bg-white/80 backdrop-blur-sm border border-white/40 rounded-xl p-4">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center space-x-2">
                                <span className="text-2xl">💧</span>
                                <span className="font-semibold text-gray-900">펌프</span>
                              </div>
                              <button
                                onClick={() => handleDeviceToggle(device.id, 'pump', !bedControls[device.id]?.pump)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 ${
                                  bedControls[device.id]?.pump ? 'bg-green-600' : 'bg-gray-200'
                                }`}
                              >
                                <span
                                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                                    bedControls[device.id]?.pump ? 'translate-x-6' : 'translate-x-1'
                                  }`}
                                />
                              </button>
                            </div>
                            <div className="text-xs text-gray-600">
                              {bedControls[device.id]?.pump ? '켜짐' : '꺼짐'}
                            </div>
                          </div>

                          {/* 팬 */}
                          <div className="bg-white/80 backdrop-blur-sm border border-white/40 rounded-xl p-4">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center space-x-2">
                                <span className="text-2xl">🌀</span>
                                <span className="font-semibold text-gray-900">팬</span>
                              </div>
                              <button
                                onClick={() => handleDeviceToggle(device.id, 'fan', !bedControls[device.id]?.fan)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 ${
                                  bedControls[device.id]?.fan ? 'bg-green-600' : 'bg-gray-200'
                                }`}
                              >
                                <span
                                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                                    bedControls[device.id]?.fan ? 'translate-x-6' : 'translate-x-1'
                                  }`}
                                />
                              </button>
                            </div>
                            <div className="text-xs text-gray-600">
                              {bedControls[device.id]?.fan ? '켜짐' : '꺼짐'}
                            </div>
                          </div>
                        </div>

                        {/* Schedule Control */}
                        <div className="bg-white/80 backdrop-blur-sm border border-white/40 rounded-xl p-4 mb-4">
                          <div className="flex items-center justify-between mb-4">
                            <h6 className="font-semibold text-gray-900 flex items-center">
                              <span className="text-xl mr-2">⏰</span>
                              스케줄 관리
                            </h6>
                            <button
                              onClick={() => handleScheduleChange(device.id, 'enabled', !bedControls[device.id]?.schedule?.enabled)}
                              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 ${
                                bedControls[device.id]?.schedule?.enabled ? 'bg-blue-600' : 'bg-gray-200'
                              }`}
                            >
                              <span
                                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                                  bedControls[device.id]?.schedule?.enabled ? 'translate-x-6' : 'translate-x-1'
                                }`}
                              />
                            </button>
                          </div>
                          
                          {bedControls[device.id]?.schedule?.enabled && (
                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">켜는 시간</label>
                                <input
                                  type="time"
                                  value={bedControls[device.id]?.schedule?.onTime || '08:00'}
                                  onChange={(e) => handleScheduleChange(device.id, 'onTime', e.target.value)}
                                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                />
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">끄는 시간</label>
                                <input
                                  type="time"
                                  value={bedControls[device.id]?.schedule?.offTime || '18:00'}
                                  onChange={(e) => handleScheduleChange(device.id, 'offTime', e.target.value)}
                                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                />
                              </div>
                            </div>
                          )}
                        </div>

                        {/* Dual Time Control */}
                        <div className="bg-white/80 backdrop-blur-sm border border-white/40 rounded-xl p-4">
                          <div className="flex items-center justify-between mb-4">
                            <h6 className="font-semibold text-gray-900 flex items-center">
                              <span className="text-xl mr-2">🔄</span>
                              듀얼 타임 (켜기/끄기 반복)
                            </h6>
                            <button
                              onClick={() => handleDualTimeChange(device.id, 'enabled', !bedControls[device.id]?.dualTime?.enabled)}
                              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200 ${
                                bedControls[device.id]?.dualTime?.enabled ? 'bg-purple-600' : 'bg-gray-200'
                              }`}
                            >
                              <span
                                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ${
                                  bedControls[device.id]?.dualTime?.enabled ? 'translate-x-6' : 'translate-x-1'
                                }`}
                              />
                            </button>
                          </div>
                          
                          {bedControls[device.id]?.dualTime?.enabled && (
                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">켜는 시간 (분)</label>
                                <input
                                  type="number"
                                  min="1"
                                  max="1440"
                                  value={bedControls[device.id]?.dualTime?.onMinutes || 30}
                                  onChange={(e) => handleDualTimeChange(device.id, 'onMinutes', parseInt(e.target.value))}
                                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                />
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">끄는 시간 (분)</label>
                                <input
                                  type="number"
                                  min="1"
                                  max="1440"
                                  value={bedControls[device.id]?.dualTime?.offMinutes || 30}
                                  onChange={(e) => handleDualTimeChange(device.id, 'offMinutes', parseInt(e.target.value))}
                                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                />
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    {/* Bed Status & Sensor Data */}
                    <div className="mt-6 border-t border-gray-200 pt-6">
                      <h5 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                        <span className="text-2xl mr-2">📊</span>
                        베드 상태 및 센서 데이터
                      </h5>
                      
                      {/* Control Status */}
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                        <div className="bg-gradient-to-r from-yellow-50 to-yellow-100 border border-yellow-200 rounded-xl p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <span className="text-2xl">💡</span>
                              <div>
                                <div className="text-sm font-medium text-gray-700">램프</div>
                                <div className="text-xs text-gray-500">조명 상태</div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className={`text-lg font-bold ${(bedControls[device.id]?.lamp1 || bedControls[device.id]?.lamp2) ? 'text-green-600' : 'text-gray-400'}`}>
                                {(bedControls[device.id]?.lamp1 || bedControls[device.id]?.lamp2) ? 'ON' : 'OFF'}
                              </div>
                              <div className="text-xs text-gray-500">
                                {bedControls[device.id]?.lamp1 ? '램프1' : ''} {bedControls[device.id]?.lamp2 ? '램프2' : ''}
                              </div>
                            </div>
                          </div>
                        </div>

                        <div className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 rounded-xl p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <span className="text-2xl">💧</span>
                              <div>
                                <div className="text-sm font-medium text-gray-700">펌프</div>
                                <div className="text-xs text-gray-500">급수 상태</div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className={`text-lg font-bold ${bedControls[device.id]?.pump ? 'text-blue-600' : 'text-gray-400'}`}>
                                {bedControls[device.id]?.pump ? 'ON' : 'OFF'}
                              </div>
                              <div className="text-xs text-gray-500">급수</div>
                            </div>
                          </div>
                        </div>

                        <div className="bg-gradient-to-r from-green-50 to-green-100 border border-green-200 rounded-xl p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <span className="text-2xl">🌀</span>
                              <div>
                                <div className="text-sm font-medium text-gray-700">팬</div>
                                <div className="text-xs text-gray-500">환기 상태</div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className={`text-lg font-bold ${bedControls[device.id]?.fan ? 'text-green-600' : 'text-gray-400'}`}>
                                {bedControls[device.id]?.fan ? 'ON' : 'OFF'}
                              </div>
                              <div className="text-xs text-gray-500">환기</div>
                            </div>
                          </div>
                        </div>

                        <div className="bg-gradient-to-r from-purple-50 to-purple-100 border border-purple-200 rounded-xl p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <span className="text-2xl">⏰</span>
                              <div>
                                <div className="text-sm font-medium text-gray-700">스케줄</div>
                                <div className="text-xs text-gray-500">자동 제어</div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className={`text-lg font-bold ${bedControls[device.id]?.schedule?.enabled ? 'text-purple-600' : 'text-gray-400'}`}>
                                {bedControls[device.id]?.schedule?.enabled ? 'ON' : 'OFF'}
                              </div>
                              <div className="text-xs text-gray-500">
                                {bedControls[device.id]?.schedule?.enabled ? 
                                  `${bedControls[device.id]?.schedule?.onTime}~${bedControls[device.id]?.schedule?.offTime}` : 
                                  '수동'
                                }
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Sensor Data */}
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        {/* Temperature */}
                        <div className="bg-gradient-to-r from-red-50 to-red-100 border border-red-200 rounded-xl p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <span className="text-2xl">🌡️</span>
                              <div>
                                <div className="text-sm font-medium text-gray-700">온도</div>
                                <div className="text-xs text-gray-500">Temperature</div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="text-2xl font-bold text-red-600">
                                {(() => {
                                  const tempSensor = deviceSensors.find(s => s.type === 'temperature');
                                  if (tempSensor) {
                                    const reading = sensorReadings.find(r => r.sensor_id === tempSensor.id);
                                    return reading ? `${reading.value}°C` : '--°C';
                                  }
                                  return '--°C';
                                })()}
                              </div>
                              <div className="text-xs text-gray-500">적정: 20-25°C</div>
                            </div>
                          </div>
                        </div>

                        {/* Humidity */}
                        <div className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 rounded-xl p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <span className="text-2xl">💧</span>
                              <div>
                                <div className="text-sm font-medium text-gray-700">습도</div>
                                <div className="text-xs text-gray-500">Humidity</div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="text-2xl font-bold text-blue-600">
                                {(() => {
                                  const humiditySensor = deviceSensors.find(s => s.type === 'humidity');
                                  if (humiditySensor) {
                                    const reading = sensorReadings.find(r => r.sensor_id === humiditySensor.id);
                                    return reading ? `${reading.value}%` : '--%';
                                  }
                                  return '--%';
                                })()}
                              </div>
                              <div className="text-xs text-gray-500">적정: 60-80%</div>
                            </div>
                          </div>
                        </div>

                        {/* EC Value */}
                        <div className="bg-gradient-to-r from-green-50 to-green-100 border border-green-200 rounded-xl p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <span className="text-2xl">⚡</span>
                              <div>
                                <div className="text-sm font-medium text-gray-700">EC</div>
                                <div className="text-xs text-gray-500">전기전도도</div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="text-2xl font-bold text-green-600">
                                {(() => {
                                  const ecSensor = deviceSensors.find(s => s.type === 'ec');
                                  if (ecSensor) {
                                    const reading = sensorReadings.find(r => r.sensor_id === ecSensor.id);
                                    return reading ? `${reading.value} mS/cm` : '-- mS/cm';
                                  }
                                  return '-- mS/cm';
                                })()}
                              </div>
                              <div className="text-xs text-gray-500">적정: 1.2-2.0</div>
                            </div>
                          </div>
                        </div>

                        {/* pH Value */}
                        <div className="bg-gradient-to-r from-purple-50 to-purple-100 border border-purple-200 rounded-xl p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <span className="text-2xl">🧪</span>
                              <div>
                                <div className="text-sm font-medium text-gray-700">pH</div>
                                <div className="text-xs text-gray-500">산성도</div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="text-2xl font-bold text-purple-600">
                                {(() => {
                                  const phSensor = deviceSensors.find(s => s.type === 'ph');
                                  if (phSensor) {
                                    const reading = sensorReadings.find(r => r.sensor_id === phSensor.id);
                                    return reading ? reading.value : '--';
                                  }
                                  return '--';
                                })()}
                              </div>
                              <div className="text-xs text-gray-500">적정: 6.0-7.0</div>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Additional Sensors */}
                      {deviceSensors.length > 0 && (
                        <div className="bg-white/80 backdrop-blur-sm border border-white/40 rounded-xl p-4">
                          <h6 className="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                            <span className="text-lg mr-2">📡</span>
                            연결된 센서들
                          </h6>
                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                            {deviceSensors.map((sensor) => {
                              const reading = sensorReadings.find(r => r.sensor_id === sensor.id);
                              return (
                                <div key={sensor.id} className="bg-white/80 backdrop-blur-sm border border-white/40 rounded-lg p-3">
                                  <div className="flex items-center justify-between">
                                    <div className="flex items-center space-x-3">
                                      <div className="w-8 h-8 bg-gradient-to-br from-green-400 to-blue-500 rounded-lg flex items-center justify-center">
                                        <span className="text-sm">📊</span>
                                      </div>
                                      <div>
                                        <div className="font-semibold text-gray-900 text-sm">
                                          {sensor.type}
                                        </div>
                                        <div className="text-xs text-gray-600">
                                          {sensor.unit}
                                        </div>
                                      </div>
                                    </div>
                                    <div className="text-right">
                                      <div className="text-lg font-bold text-gray-900">
                                        {reading ? reading.value : '--'}
                                      </div>
                                      <div className="text-xs text-gray-500">
                                        {reading ? new Date(reading.ts).toLocaleTimeString('ko-KR', { 
                                          hour: '2-digit', 
                                          minute: '2-digit' 
                                        }) : 'N/A'}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}

              {filteredDevices.length === 0 && (
                <div className="text-center py-16">
                  <div className="w-24 h-24 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl flex items-center justify-center mx-auto mb-6">
                    <span className="text-4xl">🌱</span>
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-2">
                    {bedFilter === 'active' && '활성화된 베드가 없습니다'}
                    {bedFilter === 'inactive' && '비활성화된 베드가 없습니다'}
                    {bedFilter === 'dashboard' && '대시보드에 표시되는 베드가 없습니다'}
                    {bedFilter === 'no-dashboard' && '대시보드에서 숨겨진 베드가 없습니다'}
                    {selectedBed && '선택한 베드를 찾을 수 없습니다'}
                    {bedFilter === 'all' && !selectedBed && '등록된 베드가 없습니다'}
                  </h3>
                  <p className="text-gray-600 mb-6">
                    {bedFilter === 'active' && '활성화된 베드를 찾을 수 없습니다. 다른 필터를 시도해보세요.'}
                    {bedFilter === 'inactive' && '비활성화된 베드를 찾을 수 없습니다. 모든 베드가 활성화되어 있습니다.'}
                    {bedFilter === 'dashboard' && '대시보드에 표시되는 베드가 없습니다. 베드 설정을 확인해보세요.'}
                    {bedFilter === 'no-dashboard' && '대시보드에서 숨겨진 베드가 없습니다. 모든 베드가 대시보드에 표시됩니다.'}
                    {selectedBed && '선택한 베드가 존재하지 않거나 접근 권한이 없습니다.'}
                    {bedFilter === 'all' && !selectedBed && '첫 번째 베드를 등록해보세요.'}
                  </p>
                  <div className="flex justify-center space-x-4">
                    {user && (user.role === 'team_leader' || user.role === 'team_member') && !userSettings.showAllBedsInBedManagement && (
                      <button
                        onClick={() => handleSettingChange('showAllBedsInBedManagement', true)}
                        className="bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 rounded-xl font-bold shadow-lg hover:shadow-xl transition-all duration-200"
                      >
                        모든 베드 보기
                      </button>
                    )}
                  </div>
                </div>
              )}

              {/* 새 배드 추가 버튼 - 항상 표시 */}
              <div className="flex justify-center mt-8">
                <button 
                  onClick={() => {
                    console.log('새 배드 추가 버튼 클릭됨');
                    setShowAddBedModal(true);
                  }}
                  className="bg-gradient-to-r from-green-500 to-blue-500 text-white px-8 py-3 rounded-xl font-bold shadow-lg hover:shadow-xl transition-all duration-200"
                >
                  + 새 배드 추가
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* 새 배드 추가 모달 */}
      {showAddBedModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-8 w-full max-w-md mx-4 shadow-2xl">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-2xl font-bold text-gray-900">새 배드 추가</h3>
              <button
                onClick={() => setShowAddBedModal(false)}
                className="text-gray-400 hover:text-gray-600 text-2xl"
              >
                ×
              </button>
            </div>

            <div className="space-y-6">
              {/* 배드 이름 */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  배드 이름 *
                </label>
                <input
                  type="text"
                  value={newBedData.name}
                  onChange={(e) => setNewBedData(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="예: A-1, 베드1, 토마토베드"
                />
              </div>

              {/* 작물 이름 */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  작물 이름 *
                </label>
                <input
                  type="text"
                  value={newBedData.cropName}
                  onChange={(e) => setNewBedData(prev => ({ ...prev, cropName: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="예: 토마토, 상추, 딸기"
                />
              </div>

              {/* 배드 방식 */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  배드 방식
                </label>
                <select
                  value={newBedData.growingMethod}
                  onChange={(e) => setNewBedData(prev => ({ ...prev, growingMethod: e.target.value as any }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="담액식">담액식</option>
                  <option value="NFT식">NFT식</option>
                  <option value="분무식">분무식</option>
                  <option value="점적식">점적식</option>
                  <option value="기타">기타</option>
                </select>
              </div>

              {/* 버튼들 */}
              <div className="flex space-x-4 pt-4">
                <button
                  onClick={() => setShowAddBedModal(false)}
                  className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  취소
                </button>
                <button
                  onClick={handleAddBed}
                  className="flex-1 px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-lg hover:from-green-600 hover:to-blue-600 transition-all duration-200 font-semibold"
                >
                  배드 추가
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* 새 농장 추가 모달 */}
      {showAddFarmModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-8 w-full max-w-md mx-4 shadow-2xl">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-2xl font-bold text-gray-900">새 농장 추가</h3>
              <button
                onClick={() => setShowAddFarmModal(false)}
                className="text-gray-400 hover:text-gray-600 text-2xl"
              >
                ×
              </button>
            </div>

            <div className="space-y-6">
              {/* 농장 이름 */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  농장 이름 *
                </label>
                <input
                  type="text"
                  value={newFarmData.name}
                  onChange={(e) => setNewFarmData(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="예: 스마트팜 A, 토마토 농장"
                />
              </div>

              {/* 농장 설명 */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  농장 설명
                </label>
                <textarea
                  value={newFarmData.description}
                  onChange={(e) => setNewFarmData(prev => ({ ...prev, description: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  rows={3}
                  placeholder="농장에 대한 간단한 설명을 입력하세요"
                />
              </div>

              {/* 농장 위치 */}
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  농장 위치
                </label>
                <input
                  type="text"
                  value={newFarmData.location}
                  onChange={(e) => setNewFarmData(prev => ({ ...prev, location: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="예: 경기도 수원시, 서울시 강남구"
                />
              </div>

              {/* 버튼들 */}
              <div className="flex space-x-4 pt-4">
                <button
                  onClick={() => setShowAddFarmModal(false)}
                  className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  취소
                </button>
                <button
                  onClick={handleAddFarm}
                  className="flex-1 px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg hover:from-purple-600 hover:to-pink-600 transition-all duration-200 font-semibold"
                >
                  농장 추가
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
